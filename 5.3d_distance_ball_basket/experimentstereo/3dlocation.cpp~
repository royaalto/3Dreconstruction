//Copyright Wang Fei, Zhang Yi

#include <opencv2/highgui.hpp>
#include <opencv2/aruco.hpp>
#include <iostream>
#include "opencv2/calib3d.hpp"
#include "opencv2/imgcodecs.hpp"
#include "opencv2/imgproc.hpp"
#include <sstream>
#include <vector>
#include <string>
#include <algorithm>
#include <iostream>
#include <iterator>
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

using namespace std;
using namespace cv;

  
    

int main() {
    int k=0;  
    VideoCapture wf0(0);
    VideoCapture wf1(1);
    if  (!wf0.isOpened()) cout << "wf0 doesn't work" << endl;
    if  (!wf1.isOpened()) cout << "wf1 doesn't work" << endl;
	/*wf0.set(CV_CAP_PROP_FRAME_WIDTH, 480);
	wf0.set(CV_CAP_PROP_FRAME_HEIGHT, 270);
	wf1.set(CV_CAP_PROP_FRAME_WIDTH, 480);
	wf1.set(CV_CAP_PROP_FRAME_HEIGHT, 270);*/
    Ptr<aruco::Dictionary> dictionary = aruco::getPredefinedDictionary(aruco::DICT_4X4_50);
    Ptr<aruco::DetectorParameters> detectorParams = aruco::DetectorParameters::create();
    //detectorParams->doCornerRefinement = true; // do corner refinement in markers

    while(wf0.grab() && wf1.grab()) {
	
	
	Mat frame0, frameCopy0;
        Mat frame1, frameCopy1;
	wf0.retrieve(frame0);
	wf1.retrieve(frame1);	
	
        vector< int > ids0;
        vector< vector< Point2f > > corners0old;
	vector< int > ids1;
        vector< vector< Point2f > > corners1old;

        aruco::detectMarkers(frame0, dictionary, corners0old, ids0);
	aruco::detectMarkers(frame1, dictionary, corners1old, ids1);
	
        frame0.copyTo(frameCopy0);
        frame1.copyTo(frameCopy1);
        if(ids0.size() > 0) {
	    //cout << "right camera has detedted " << ids0.size() << " markers" << endl;
            aruco::drawDetectedMarkers(frameCopy0, corners0old, ids0); 
        }
	if(ids1.size() > 0) {
	    //cout << "left camera has detedted " << ids1.size() << " markers" << endl;
            aruco::drawDetectedMarkers(frameCopy1, corners1old, ids1); 
        }
        imshow("wf1", frameCopy1);
        imshow("wf0", frameCopy0);
	vector<Point2f> corners0;
	vector<Point2f> corners1;
//data transfer


	for (int i = 0; i< corners0old.size(); i++)
	{
		for(int j=0; j < corners0old[i].size(); j++)
			{
				corners0.push_back(corners0old[i][j]);
			}
	}	

	for (int i = 0; i< corners1old.size(); i++)
	{
		for(int j=0; j < corners1old[i].size(); j++)
			{
				corners1.push_back(corners1old[i][j]);
			}
	}

	/*if(corners0.size() > 0)	{
        cout << "corners0  has " << corners0.size() << " corners" << endl;
	cout << "corners0" << corners0 << endl << endl;
	}
	if(corners1.size() > 0)	{
        cout << "corners1  has " << corners1.size() << " corners" << endl;
	cout << "corners1" << corners1 << endl << endl;
	}*/

	
//undistort
	if((ids0.size() > 0) && (ids1.size() > 0) &&(ids0.size() == ids1.size()) ){
     
//image output

      	//char filename0[80];
	//char filename1[80];
	//sprintf(filename0,"/home/irob/wf/image/0/test_%d.jpg",k);
	//sprintf(filename1,"/home/irob/wf/image/1/test_%d.jpg",k);
        //imwrite(filename0, frameCopy0);
	//imwrite(filename1, frameCopy1);
	

   	Mat cameraMatrix0 = (Mat_<double>(3,3) << 533.81069575904655, 0., 319.40538920267261, 0., 534.40168496974275, 240.22107451961429, 0., 0., 1.);
	Mat cameraMatrix1 = (Mat_<double>(3,3) << 533.81069575904655, 0., 317.90761254312912, 0., 534.40168496974275, 237.01117359875337, 0., 0., 1.);
	Mat disCoeffs0 = (Mat_<double>(1,8) << 4.3896687130449204e-02, -3.0862476046571435e-01, 0., 0., 0.,0., 0., -1.4085605754447097e+00);
	Mat disCoeffs1 = (Mat_<double>(1,8) << 8.3060503864075069e-02, -9.6114711277749051e-02, 0., 0., 0.,0., 0., 8.0954403370078909e-01);
	
	Mat undistortedcorners0;
	Mat undistortedcorners1;
        undistortPoints(corners0, undistortedcorners0, cameraMatrix0, disCoeffs0, noArray(), cameraMatrix0);
        undistortPoints(corners1, undistortedcorners1, cameraMatrix1, disCoeffs1, noArray(), cameraMatrix1);
	cout << "corners0 = " << corners0 << endl << endl;
	cout << "corners1 = " << corners1 << endl << endl;
       
	cout << "undistortedcorners0 = " << undistortedcorners0 << endl << endl;
	cout << "undistortedcorners1 = " << undistortedcorners1 << endl << endl;
	
// the second method
	//the rotation of the camera with respect each other using stereo calibration	
        Mat rotation = (Mat_<double>(3,3) << 9.9960511402650210e-01, 2.8006790352574761e-02, 2.2881665609795236e-03, -2.6081572560851422e-02, 9.5502381144141324e-01, -2.9537987601166910e-01, -1.0457895812107796e-02, 2.9520355565958706e-01, 9.5537714706869570e-01);
	Mat translation = (Mat_<double>(3,1) << 7.2849409036319734e-01, 7.2497179194296608e+00, -2.6589484320994005e-03);
	Mat Identity = (Mat_<double>(3,3) << 1, 0, 0, 0, 1, 0, 0, 0, 1);
	Mat zeros = (Mat_<double>(3,1) << 0, 0, 0);
        Mat E0;
	Mat E1;
	hconcat(rotation,translation,E0);
	hconcat(Identity,zeros,E1);
	
	Mat projectionMatrix0;
        Mat projectionMatrix1;
	projectionMatrix0 = cameraMatrix0 * E0;
	projectionMatrix1 = cameraMatrix1 * E1;
	int geshu1 = -1;
	int geshu2 = -1;
	int geshu3 = -1;
	int geshu4 = -1;
//the first marker
	for(int i = 0; i < ids0.size(); i++)
	{
      		if(ids0[i] == 1)
		{
			geshu1 = i;
		}
	}

	for(int i = 0; i < ids1.size(); i++)
	{
      		if(ids1[i] == 1)
		{
			geshu2 = i;
		}
	}
        cout << geshu1 << endl;
	cout << geshu2 << endl;
	
	Mat firstpoint0(1,1,CV_32FC2,Scalar(undistortedcorners0.at<float>(geshu1*8),undistortedcorners0.at<float>(geshu1*8+1)));
	Mat firstpoint1(1,1,CV_32FC2,Scalar(undistortedcorners1.at<float>(geshu2*8),undistortedcorners1.at<float>(geshu2*8+1)));
	cout<<"firstpoint0="<<firstpoint0<<endl;
	cout<<"firstpoint1="<<firstpoint1<<endl;
	
	
//the second marker
	for(int i = 0; i < ids0.size(); i++)
	{
      		if(ids0[i] == 49)
		{
			geshu3 = i;
		}
	}

	for(int i = 0; i < ids1.size(); i++)
	{
      		if(ids1[i] == 49)
		{
			geshu4 = i;
		}
	}
	cout << geshu3 << endl;
	cout << geshu4 << endl;
		
	Mat secondpoint1(1,1,CV_32FC2,Scalar(undistortedcorners1.at<float>(geshu4*8),undistortedcorners1.at<float>(geshu4*8+1)));
	Mat secondpoint0(1,1,CV_32FC2,Scalar(undistortedcorners0.at<float>(geshu3*8),undistortedcorners0.at<float>(geshu3*8+1)));
	
	cout<<"secondpoint1="<<secondpoint1<<endl;
	cout<<"secondpoint0="<<secondpoint0<<endl;
	for(int size = 0; size<ids0.size(); size++)
	{
		cout<<"ids0="<<ids0[size] << endl << endl;
		
	}
	
	for(int size = 0; size<ids1.size(); size++)
	{
		cout<<"ids1="<<ids1[size] << endl << endl;
		
	}
	
	
	Mat firstpoints4D;
	Mat secondpoints4D;
        if((geshu1 >=0) && (geshu2 >=0)){
	triangulatePoints(projectionMatrix0,projectionMatrix1,firstpoint1,firstpoint0,firstpoints4D);}
	if((geshu3 >=0) && (geshu4 >=0)){
	triangulatePoints(projectionMatrix0,projectionMatrix1,secondpoint1,secondpoint0,secondpoints4D);}
       // if(sizeof points4D > 0){
	//cout << "points4D = " << points4D << endl << endl;}

	Mat firstpoints3D0;
	Mat secondpoints3D0;
	if((geshu1 >=0) && (geshu2 >=0) && (geshu3 >=0) && (geshu4 >=0)){
	convertPointsFromHomogeneous(firstpoints4D.t(),firstpoints3D0);
	convertPointsFromHomogeneous(secondpoints4D.t(),secondpoints3D0);}
	double distance;
	distance = norm(firstpoints3D0-secondpoints3D0) * 75.22;
	
	cout << distance << endl;
	
	//cout << "points3D0 = " << points3D0 << endl << endl;
	



//cout << "points3D1 = " << points3D1 << endl << endl;
        
        k++;
	
	}//if
	char key = (char)waitKey(1);
	if(key == 27) break;

 	corners0old.clear();
	corners1old.clear();
	ids0.clear();
	ids1.clear();
	corners0.clear();
	corners1.clear();
 	
        }//while

    wf0.release();
    wf1.release();
    return 0;
}//main
